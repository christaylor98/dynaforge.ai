"""Phase 1 Designer agent skeleton.

Translates a scenario brief into a deterministic design specification so the
Implementer agent can execute against an explicit contract.
"""

from __future__ import annotations

import datetime
import sys
from pathlib import Path
from typing import Mapping, Sequence

if __package__ is None or __package__ == "":
    sys.path.append(str(Path(__file__).resolve().parents[1]))

from audit import log_handoff

PROJECT_ROOT = Path(__file__).resolve().parents[1]
DESIGN_DIR = PROJECT_ROOT / "design"
DESIGN_SPEC_PATH = DESIGN_DIR / "DESIGN_SPEC.md"


def _as_list(values: Sequence[object] | object | None) -> list[str]:
    if values is None:
        return []
    if isinstance(values, (str, bytes)):
        return [str(values)]
    return [str(item) for item in values]


class Designer:
    """Render design artifacts for downstream agents."""

    def __init__(self, phase: str = "1") -> None:
        self.phase = phase

    def create_design_spec(
        self,
        scenario: Mapping[str, object],
        *,
        brief_path: Path | None = None,
        output_path: Path | None = None,
    ) -> Path:
        """Generate a deterministic design specification for the given scenario."""
        DESIGN_DIR.mkdir(parents=True, exist_ok=True)
        target = output_path or DESIGN_SPEC_PATH

        title = str(scenario.get("title") or "Phase Deliverable")
        objective = str(scenario.get("objective") or "Define objective.")
        context = str(scenario.get("context") or "Context TBD.")
        focus_areas = _as_list(scenario.get("focus_areas"))
        deliverables = _as_list(scenario.get("deliverables"))
        acceptance = _as_list(scenario.get("acceptance_criteria"))

        focus_section = "\n".join(f"- {item}" for item in focus_areas) or "- Focus areas pending."
        deliverable_section = "\n".join(f"- {item}" for item in deliverables) or "- Deliverables pending."
        acceptance_section = "\n".join(f"- {item}" for item in acceptance) or "- Acceptance criteria pending."

        timestamp = datetime.datetime.utcnow().strftime("%Y-%m-%d %H:%M:%SZ")
        if brief_path:
            try:
                brief_display = brief_path.relative_to(PROJECT_ROOT)
            except ValueError:
                brief_display = brief_path
            brief_line = f"Source brief: `{brief_display}`."
        else:
            brief_line = "Source brief: internal scenario context."

        content = "\n".join(
            [
                f"# Design Spec â€” {title}",
                "",
                "## Objective",
                objective,
                "",
                "## Context",
                context,
                "",
                "## Focus Areas",
                focus_section,
                "",
                "## Proposed Components",
                "- Concern ingestion service reading JSONL audit entries.",
                "- Markdown synchronizer updating project detail summaries.",
                "- Command router extension acknowledging concern lifecycle commands.",
                "",
                "## Deliverables",
                deliverable_section,
                "",
                "## Acceptance Criteria",
                acceptance_section,
                "",
                "## Interfaces & Data Contracts",
                "| Component | Interface | Notes |",
                "| --------- | --------- | ----- |",
                "| Concern Logger | `audit.log_concern` | Append-only JSONL record for raised concerns. |",
                "| Markdown Synchronizer | `sync_concerns(concerns.jsonl, docs/PROJECT_DETAIL.md)` | Mirrors open/resolved state into docs. |",
                "| Interaction Stub | `/ack`, `/resolve`, `/assign` handlers | Extend CLI bridge with deterministic responses. |",
                "",
                "## Traceability",
                brief_line,
                "",
                f"_Auto-generated by Designer.create_design_spec at {timestamp}._",
            ]
        )

        target.write_text(content + "\n", encoding="utf-8")

        log_handoff(
            phase=self.phase,
            from_agent="designer",
            to_agent="implementer",
            summary=f"Published design specification for '{title}'.",
            artifacts=[str(target.relative_to(PROJECT_ROOT))],
            concerns=[],
            metadata={"scenario_title": title, "timestamp": timestamp},
        )

        return target
