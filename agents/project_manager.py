"""Phase 0 Project Manager skeleton.

Responsibilities:
- Load high-level requirements and distill them into short summaries.
- Refresh executive (`PROJECT_OVERVIEW.md`) and detailed (`PROJECT_DETAIL.md`)
  documentation with the latest snapshot.
- Emit an audit handoff entry to capture the update for downstream agents.

The implementation prefers deterministic output so Phase 0 demos can re-run safely.
"""

from __future__ import annotations

import datetime
import textwrap
from pathlib import Path
from typing import Iterable, Mapping

import sys

if __package__ is None or __package__ == "":
    sys.path.append(str(Path(__file__).resolve().parents[1]))

from audit import log_handoff

PROJECT_ROOT = Path(__file__).resolve().parents[1]
DOCS_DIR = PROJECT_ROOT / "docs"

REQUIREMENTS_PATH = DOCS_DIR / "REQUIREMENTS.md"
OVERVIEW_PATH = DOCS_DIR / "PROJECT_OVERVIEW.md"
DETAIL_PATH = DOCS_DIR / "PROJECT_DETAIL.md"

PHASE = "0"
SCHEMA_VERSION = "0.1.0"


def _load_requirement_rows() -> list[str]:
    """Return table rows from REQUIREMENTS.md limited to the functional table."""
    if not REQUIREMENTS_PATH.exists():
        return []

    rows: list[str] = []
    in_table = False
    for line in REQUIREMENTS_PATH.read_text(encoding="utf-8").splitlines():
        if line.strip().startswith("| FR-"):
            in_table = True
            rows.append(line)
        elif in_table and not line.strip():
            break
    return rows


def _summarize(rows: Iterable[str]) -> list[str]:
    """Convert requirement table rows into bullet-ready summaries."""
    summaries: list[str] = []
    for row in rows:
        cells = [part.strip() for part in row.strip("|").split("|")]
        if len(cells) < 3:
            continue
        req_id, requirement, notes = cells[:3]
        summaries.append(f"{req_id}: {requirement} — {notes}")
    return summaries


class ProjectManager:
    """Lightweight coordinator for Phase 0 documentation refresh."""

    def __init__(self, phase: str = PHASE) -> None:
        self.phase = phase

    def run(self) -> None:
        rows = _load_requirement_rows()
        requirement_summaries = _summarize(rows)

        overview_content = self._render_overview(requirement_summaries)
        detail_content = self._render_detail(requirement_summaries)

        OVERVIEW_PATH.write_text(overview_content, encoding="utf-8")
        DETAIL_PATH.write_text(detail_content, encoding="utf-8")

        log_handoff(
            phase=self.phase,
            from_agent="project_manager",
            to_agent="designer",
            summary="Updated project overview and detail documents from requirements.",
            artifacts=[str(OVERVIEW_PATH.relative_to(PROJECT_ROOT)), str(DETAIL_PATH.relative_to(PROJECT_ROOT))],
            concerns=[],
            metadata={"schema_version": SCHEMA_VERSION, "timestamp": datetime.datetime.utcnow().isoformat() + "Z"},
        )

    def _render_overview(self, requirement_summaries: list[str]) -> str:
        top_items = requirement_summaries[:3] or ["No functional requirements captured."]
        highlights = "\n".join(f"- {item}" for item in top_items)
        next_steps = "\n".join(
            (
                "- Socialize Phase 0 scaffolding with downstream agents.",
                "- Prepare design briefs for core agent interfaces.",
                "- Confirm audit trail schema with QA stakeholders.",
            )
        )
        timestamp = datetime.datetime.utcnow().strftime("%Y-%m-%d %H:%M:%SZ")
        lines = [
            "# Project Overview",
            "",
            "## Mission",
            "Build the Dynaforge.ai framework with auditable agent workflows and human governance checkpoints.",
            "",
            "## Current Phase Snapshot",
            "- Phase: `0 — Foundation`",
            "- Status: Phase 0 foundation demo-ready (`make demo`).",
            "- Primary Contacts: Project Manager Agent",
            "",
            "## Highlights",
            highlights,
            "",
            "## Next Steps",
            next_steps,
            "",
            "## Approvals",
            "- `✅ Approved by Human <date>`",
            "",
            f"_Auto-generated by ProjectManager.run at {timestamp}._",
        ]
        return "\n".join(lines) + "\n"

    def create_phase_brief(self, scenario: Mapping[str, object], *, output_path: Path | None = None) -> Path:
        """Generate a concise brief for downstream agents and return the written path."""
        phase = str(scenario.get("phase") or self.phase)
        title = str(scenario.get("title") or "Phase Plan")
        objective = str(scenario.get("objective") or "TBD objective.")
        context = str(scenario.get("context", ""))
        focus_areas = list(scenario.get("focus_areas", []))
        deliverables = list(scenario.get("deliverables", []))
        success_metrics = list(scenario.get("success_metrics", []))

        focus_lines = "\n".join(f"- {item}" for item in focus_areas) or "- Focus areas to be defined."
        deliverable_lines = "\n".join(f"- {item}" for item in deliverables) or "- Deliverables to be defined."
        metric_lines = "\n".join(f"- {item}" for item in success_metrics) or "- Metrics to be defined."

        lines = [
            f"# Phase {phase} Brief — {title}",
            "",
            "## Objective",
            objective,
            "",
            "## Context",
            context or "Context will be refined with designer input.",
            "",
            "## Focus Areas",
            focus_lines,
            "",
            "## Deliverables",
            deliverable_lines,
            "",
            "## Success Metrics",
            metric_lines,
            "",
            "## Next Actions",
            "- Designer: translate objective into architecture and interaction flow.",
            "- Implementer: prepare execution plan aligned with design decisions.",
            "- Tester: define validation scenarios tied to success metrics.",
        ]

        brief_path = output_path or DOCS_DIR / f"PHASE{phase}_BRIEF.md"
        brief_path.write_text("\n".join(lines) + "\n", encoding="utf-8")

        log_handoff(
            phase=phase,
            from_agent="project_manager",
            to_agent="designer",
            summary=f"Prepared Phase {phase} brief for '{title}'.",
            artifacts=[str(brief_path.relative_to(PROJECT_ROOT))],
            concerns=[],
            metadata={"schema_version": SCHEMA_VERSION, "scenario_title": title},
        )

        return brief_path

    def _render_detail(self, requirement_summaries: list[str]) -> str:
        requirement_list = "\n".join(f"- {item}" for item in requirement_summaries) or "- Requirements document not found."
        timestamp = datetime.datetime.utcnow().strftime("%Y-%m-%d %H:%M:%SZ")
        lines = [
            "# Project Detail",
            "",
            "## Scope & Boundaries",
            "Phase 0 covers repository structure, audit primitives, interaction stub, and foundational documentation.",
            "",
            "## Deliverables",
            "- Updated project overview and detail documents.",
            "- Verified audit logger with sample entries and test coverage.",
            "- Interaction stub supporting `/status` and `/clarify`.",
            "- Demo automation via `make demo` and audit summary via `make audit`.",
            "",
            "## Implementation Notes",
            "- Requirements digested from `REQUIREMENTS.md`:",
            requirement_list,
            "- Refresh documentation by running `python3 agents/project_manager.py` (idempotent).",
            "- Demo workflow validated via `make demo`; outputs stored under `artifacts/phase0/demo`.",
            "- Audit summary available with `make audit`.",
            "",
            "## Review Checklist",
            "- Validation artifacts attached and verified.",
            "- Outstanding concerns logged with resolution notes.",
            "- Human approval recorded with timestamp.",
            "",
            "## Appendix",
            "- Phase 0 audit evidence: `artifacts/phase0/`",
            "",
            f"_Auto-generated by ProjectManager.run at {timestamp}._",
        ]
        return "\n".join(lines) + "\n"


def main() -> None:
    ProjectManager().run()
    print("ProjectManager refreshed overview/detail docs and logged handoff.")


if __name__ == "__main__":
    main()
